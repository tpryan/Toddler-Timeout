<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"  
		xmlns:components="components.*" actionBarVisible="false"
		title="{data.kid.name}" creationComplete="init(event)" >
		
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.timeout.Kids;
			import com.terrenceryan.timeout.Kid;
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			import spark.transitions.SlideViewTransition;
			
			[Bindable]
			protected var kid:Kid = new Kid;
			protected var kidsService:Kids = null;
			protected var position:Number = -1;
			
			protected function backButton_clickHandler(event:MouseEvent):void
			{
				navigator.popView();
			}
			
			protected function init(event:FlexEvent):void
			{
				
				kid = data.kid;
				position = data.position;
				
				if (data.softControls == true){
					activateSoftControls();
				}
				
				if (data.kidsService != null){
					kidsService = data.kidsService;
				}
				else{
					kidsService = new Kids();
				}
				
				var minutes:int = Math.floor(kid.timeout/60); 
				var seconds:int = kid.timeout % 60;
				
				minutesPicker.value = minutes;
				secondsPicker.value = seconds;
				
				var trans:SlideViewTransition = new SlideViewTransition();
				trans.direction = "right";
				navigator.defaultPopTransition = trans;
				
				
			}
			
			protected function activateSoftControls():void{
				this.actionBarVisible = true;
				saveButton.visible = false;
				
				if (kid.name){
					addDeleteButton();
				}
			
			}
			
			private function addDeleteButton():void{
				var deleteBtnIOS:Button = new Button();
				deleteBtnIOS.label = "Delete";
				deleteBtnIOS.styleName = "deleteBtnIOS";
				deleteBtnIOS.left = 15;
				deleteBtnIOS.right = 15;
				deleteBtnIOS.bottom = 20;
				deleteBtnIOS.addEventListener(MouseEvent.CLICK, deleteButton_clickHandler);
				this.addElement(deleteBtnIOS);
			}
			
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				if (position > -1){	
					kidsService.destroy(position);
				}
				navigator.popView();
				
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				trace(kid.timeout);
				var minutesAsSeconds:int = minutesPicker.value * 60;
				var seconds:int = secondsPicker.value;
				seconds = seconds + minutesAsSeconds;
					
				kid.timeout = seconds;
				kid.name = nameField.text;
				trace(kid.timeout);
				
				
				kidsService.save(kid,position);
				navigator.popView();
				
			}
			
			protected function fieldReset(event:FocusEvent):void
			{
			
				event.currentTarget.setStyle("color", 0x000000);
				event.currentTarget.removeEventListener(FocusEvent.FOCUS_IN, fieldReset);
				event.currentTarget.text = "";
				
			}
			
			
			
			protected function nameField_changeHandler(event:TextOperationEvent):void
			{
				title = nameField.text;
				
			}
			
		]]>
	</fx:Script>
	
	
	<s:navigationContent>
		<s:Button id="backButton" click="backButton_clickHandler(event)"  label="Back"  />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="deleteButton" click="saveButton_clickHandler(event)"  label="Done"  />
	</s:actionContent>
	
	<s:Rect left="10" right="10" top="10" bottom="10">
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC" />
		</s:stroke>
	</s:Rect>
	
	<s:Group id="form"  left="15" right="15" top="15" bottom="15">
		<s:layout>
			<s:FormLayout  horizontalAlign="center" />
		</s:layout>
		
		<s:TextInput id="nameField" text="{kid.name}" width="100%" textAlign="center" prompt="New Kid" change="nameField_changeHandler(event)"/>
		
		<s:Group id="pickers" width="100%">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" />
			</s:layout>
			
			<components:NumberPicker id="minutesPicker" to="10" verticalCenter="{-(minutesPicker.width + 10)}" />
			<s:Label text=":" verticalCenter="0"/>
			<components:NumberPicker id="secondsPicker" to="45" interval="15" padNumber="true" verticalCenter="10" />
		</s:Group>
		
		
		
		<s:Button id="saveButton" width="180" horizontalCenter="0" click="saveButton_clickHandler(event)"
				  icon="@Embed('/assets/disk.png')" iconPlacement="right"/>
		
	</s:Group>
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="deleteviewMenuItem" label="Delete" click="deleteButton_clickHandler(event)" icon="@Embed('/assets/delete.png')" />
	</s:viewMenuItems>
	
</s:View>
