<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" resize="view1_resizeHandler(event)"
		xmlns:components="components.*"
		actionBarVisible="false" cacheAsBitmap="true" creationComplete="init(event)"
		title="Time Out!" viewDeactivate="onDeactivate()" >
	<fx:Script>
		<![CDATA[
			import flash.events.KeyboardEvent;
			import flash.utils.Timer;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.effects.easing.*;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.effects.Resize;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			

			[Bindable]
			protected var clockChartData:ArrayCollection = null;
			
			protected var snd:Sound = new Sound( new URLRequest("assets/alarm.wav") );
			protected var sndChannel:SoundChannel = null;
			protected var trans:SoundTransform = new SoundTransform(0.6, -1);
			protected var dataToPush:Object = null;
			
			private var isPlaying:Boolean = false;
			
			
			[Embed(source='/assets/reload.png')]
			private static var Reload:Class;
			
			[Embed(source='/assets/rewindtostart.png')]
			private static var Restart:Class;
			
			private const DEFAULT_FONT_SIZE:int = 80;
			
			protected function init(event:FlexEvent):void
			{
				dataToPush = data;
				
				
				clockChartData = 
					new ArrayCollection( [
						{name: "completed", value: data.kid.timeout - data.kid.timeoutLeft  },
						{name: "uncomplete", value:  data.kid.timeoutLeft }
					]);
				
				this.addEventListener(ResizeEvent.RESIZE, onResizeView);
				
				countDownText.text = data.kid.clockReadout;
				
				
				
				data.kid.timer.removeEventListener(TimerEvent.TIMER, timerProcess);
				data.kid.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, timerEnd);
				
				
				if (data.kid.timer.running == true){
					trace("Timer still going");
					timerProcess(null);
					clockControls.switchPlayToReload();
					clockControls.cancelVisible = true;
					
					data.kid.timer.addEventListener(TimerEvent.TIMER, timerProcess);
					data.kid.timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerEnd);
					
				}
				
				
			}
			
			protected function checkOrientation():void{
				
				if (stage.stageWidth > stage.stageHeight){
					currentState = "landscape";
				}
				else{
					currentState= "portrait";
				}
				
			}
			
			protected function onResizeView(event:ResizeEvent):void
			{
				checkOrientation();
			}
			
			protected function onDeactivate():void
			{
				//timer.stop();
			}
			
			
			
			
			protected function timerButton_clickHandler(event:Event):void
			{
				
				if (data.kid.timeout > 0){
					clockControls.cancelVisible = true;
					countDownText.setStyle("fontSize", DEFAULT_FONT_SIZE);
					if (data.kid.timer.running == false){
						data.kid.timer.start();
						data.kid.timer.addEventListener(TimerEvent.TIMER, timerProcess);
						data.kid.timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerEnd);
						clockControls.switchPlayToReload();
						timerProcess(null);
						NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
					}
					else{
						data.kid.timer.reset();
						data.kid.timer.start();
						timerProcess(null);
						if (isPlaying){
							snd.close();
							isPlaying = false;
						}
					}
				}
				else{
					countDownText.text = "0 Seconds?  Discipline Fail!";
				}
				
			}
			
			protected function timerProcess(event:TimerEvent):void
			{
				
				clockChartData = 
					new ArrayCollection( [
						{name: "completed", value: data.kid.timer.currentCount },
						{name: "uncomplete", value:  data.kid.timeoutLeft }
						
					]);
				
				
				countDownText.text = data.kid.clockReadout;
				radialStroke.alpha = 1;
				trace("tick: " + data.kid.timeoutLeft);
			}
			
			
			protected function timerEnd(event:TimerEvent):void
			{
				clockControls.switchPlayToReload();
				countDownText.text = "Hug it out!";
				countDownText.setStyle("fontSize", 45);
				data.kid.timer.reset();
				
				soundAlarm();
				clockControls.cancelVisible = false;
				radialStroke.alpha = 0;
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
			}
			
			protected function soundAlarm():void{
				if (snd != null){
					sndChannel = snd.play(0,2, trans);
					
					if (clockControls.muteState == "deactivated"){
						trans.volume = 0;
						sndChannel.soundTransform = trans;
					}
					
					snd.addEventListener(Event.COMPLETE, stopSound);
					isPlaying = true;
				}
			}
			
			
			protected function backButton_clickHandler(event:MouseEvent):void
			{
				navigator.popView();
			}
			
			protected function stopSound(event:Event):void
			{
				isPlaying = false;
				trans.volume = 0;
				sndChannel.soundTransform = trans;
			}
			
			protected function restartSound(event:Event):void
			{
				trans.volume = 1;
				sndChannel.soundTransform = trans;
			}
			
			protected function setChartSize(e:Event):void{
				if(currentState == "landscape"){
					clock.width = stage.stageHeight - 2;
					clock.height = stage.stageHeight - 2;
				}
				else{
					clock.width = stage.stageWidth - 2;
					clock.height = stage.stageWidth - 2;
				}
			}
			
			
			
			
			protected function mute_toggledHandler(event:Event):void
			{
				
				if (sndChannel != null && sndChannel.position != 0){
					if (clockControls.muteState == "deactivated"){
						stopSound(null);
					}
					else{
						restartSound(null);	
					}
				}
				
			}
			
			protected function cancel_clickHandler(event:Event):void
			{
				data.kid.timer.stop();
				data.kid.cancelTimer();
				navigator.popView();
				
			}
			
			
			protected function view1_resizeHandler(event:ResizeEvent):void
			{
				//background.height = stage.stageHeight;
				//background.width = stage.stageWidth;
				//backgroundGrad.rotation = 0;
				
			}
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				if (event.keyCode == Keyboard.MENU){
					
					navigator.pushView(views.ChildEdit,dataToPush);
				}
			}
			
			protected function clock_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
	</s:states>
	
	<fx:Declarations>
		<fx:Array id="filterArray">
			<s:GlowFilter id="glow" blurX="8" blurY="8" color="#FFFFFF" quality="2" strength="1" />
		</fx:Array>
	</fx:Declarations>
	
	<s:navigationContent>
		<s:Button id="backButton" click="backButton_clickHandler(event)" icon="@Embed('/assets/arrowleft.png')"/>
	</s:navigationContent>
	
	<s:Image id="background" source="@Embed('/assets/backgroundStartBurst.png')" verticalCenter="0" horizontalCenter="0" width="2000" height="2000" />
	
	
	<mx:PieChart id="clock" top="2" click="timerButton_clickHandler(event)" horizontalCenter="0" 
				 render="setChartSize(event)" resize="setChartSize(event)" rotation="-90" creationComplete="clock_creationCompleteHandler(event)"
				 verticalCenter="0">
		<mx:series>
			<mx:PieSeries id="clockChart" dataProvider="{clockChartData}" field="value" filters="[]">
				<mx:fills>
					<s:SolidColor color="0xDDDDDD"/>
					<s:SolidColor color="0xF8F7CE"/>
				</mx:fills>
				<mx:stroke>
					<mx:Stroke color="0x333333" weight="2"/>
				</mx:stroke>
				<mx:radialStroke>
					<mx:Stroke id="radialStroke" alpha="0" color="0x666666" weight="1"/>
				</mx:radialStroke>
				<mx:showDataEffect>
					<mx:SeriesInterpolate duration="200" easingFunction="{Circular.easeInOut}"/>
				</mx:showDataEffect>
			</mx:PieSeries>
		</mx:series>
	</mx:PieChart>
	
	<s:Label id="kidName" text="{data.kid.name}" fontSize="{DEFAULT_FONT_SIZE}"
			 filters="{filterArray}"
			 horizontalCenter.portrait="0" left.landscape="10" 
			 verticalCenter.portrait="{-(clock.height/2 + 20)}"
			 top.landscape="10"
			 />
	
	<s:Label id="countDownText" click="timerButton_clickHandler(event)"
			 filters="{filterArray}"
			 fontSize="{DEFAULT_FONT_SIZE}" horizontalCenter="0" textAlign="center"
			 verticalCenter="{-countDownText.height/4 - 5}"/>
	
	
	<components:ClockControls id="clockControls" cancel="cancel_clickHandler(event)"
							  componentHeight="{clock.height/7}"
							  componentWidth="{clock.width/2}" 
							  horizontalCenter="0"
							  muteToggled="mute_toggledHandler(event)"
							  playClicked="timerButton_clickHandler(event)"
							  verticalCenter="{clock.height/6}"/>
</s:View>
