<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" actionBarVisible="false"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Edit List" creationComplete="init(event)" xmlns:components="components.*">
	
	<fx:Script>
		<![CDATA[
			import com.terrenceryan.timeout.Kids;
			import com.terrenceryan.timeout.Kid;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.transitions.FlipViewTransition;
			import spark.transitions.SlideViewTransition;
			import spark.transitions.ViewTransitionBase;
			
			protected var kidsService:Kids = null;
			[Bindable]
			protected var kids:ArrayCollection = new ArrayCollection();
			protected var dataToPush:Object = new Object();
			
			protected function init(event:FlexEvent):void
			{
				
				if (data.softControls == true){
					activateSoftControls();
				}
				
				var tmp:Object = data;
				if (data.kidsService != null){
					kidsService = data.kidsService;
				}
				else{
					kidsService = new Kids();
				}
				
				kids = kidsService.list;
				
				dataToPush = data;

				if (data.softControls == false){
					var trans:SlideViewTransition = new SlideViewTransition();
					trans.direction = "up";
					navigator.defaultPopTransition = trans;
				}
			}
			
			protected function activateSoftControls():void{
				this.actionBarVisible = true;
				removeElement(titleLabel);
				kidList.top = 10;
			}
			
			
			protected function kidList_clickHandler(event:MouseEvent):void
			{
				if (kidList.selectedIndex > -1 ){
					dataToPush.position = kidList.selectedIndex;
					dataToPush.kid = kidList.selectedItem;
					kidList.selectedIndex = -1;
					navigator.pushView(ChildEdit,dataToPush);
				}
			}
			
			
			
			protected function backButton_clickHandler(event:MouseEvent):void
			{
				navigator.popView();
			}
			
			protected function newButton_clickHandler(event:Event):void
			{
				dataToPush.position = -1;
				dataToPush.kid = new Kid();
				dataToPush.kid.name = "";
				navigator.pushView(ChildEdit,dataToPush);
				trace("Child Edit Pushed");
				
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="filterArray">
			<s:GlowFilter id="glow" blurX="8" blurY="8" color="#000000" quality="2" strength="1" alpha=".7" />
		</fx:Array>
	</fx:Declarations>
	
	<s:navigationContent>
		<s:Button id="backButton" click="backButton_clickHandler(event)" label="Back"  />
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="newButton" click="newButton_clickHandler(event)"  label="Add"  />
	</s:actionContent>
	
	
	
	<s:Label id="titleLabel"  x="10" y="14" color="#F8F7CE" text="Edit List" filters="{filterArray}" />
	
	<s:List id="kidList" left="10" right="10" top="57" bottom="10" dataProvider="{kids}" labelField="name" click="kidList_clickHandler(event)" cacheAsBitmap="true" borderColor="0xcccccc" borderVisible="true">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer  messageFunction="secondsToTimer" decorator="@Embed('/assets/pencilangled.png')" alternatingItemColors="['0xf7f7f7','0xFFFFF3']" cacheAsBitmap="true">
					<fx:Script>
						<![CDATA[
							
							private function styleText():void{
								labelDisplay.setStyle("fontSize", 50);
								messageDisplay.setStyle("fontSize", 24);
								messageDisplay.setStyle("color", 0x61656A);
							}
							
							private function secondsToTimer(ob:Object):String{
								styleText();
								var min:int = Math.floor(ob.timeout/60); 
								var sec:int = ob.timeout % 60;
								
								var minutes:String = min.toString();
								var seconds:String = sec.toString();
								
								if (seconds.length == 1){
									seconds = "0" + seconds;
								}
								
								var result:String = minutes + ":" + seconds;
								
								return result;
							}
							
						]]>
					</fx:Script>
					
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<s:viewMenuItems>
		<s:ViewMenuItem id="addButton" label="Add" click="newButton_clickHandler(event)" icon="@Embed('/assets/plus.png')" />
	</s:viewMenuItems>
	
	
	
</s:View>
