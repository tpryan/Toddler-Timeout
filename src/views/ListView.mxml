<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" cacheAsBitmap="true" actionBarVisible="false" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Who's in Trouble?" 
		keyDown="keyPress(event)" creationComplete="init(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.primitives.BitmapImage;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.SlideViewTransition;
			
			[Bindable]
			protected var kids:ArrayCollection = new ArrayCollection();
			protected var kidsService:Kids = null;
			protected var dataToPush:Object = new Object();
			
			
			protected function init(event:FlexEvent):void
			{
				
				if (data.softControls == true){
					activateSoftControls();
				}
				
				var tmp:Object = data;
				kidsService = data.kidsService;
				
				dataToPush = data;
				
				dataToPush.position = -1;
				dataToPush.kid = new Kid;
				dataToPush.kid.name = "New Kid";
				
				kids = tmp.kidsService.list;
				
				if (kids.length == 0){
					kidsService.initList();
				}
				
				if (kids.length == 0){
					navigator.pushView(ChildEdit,dataToPush);
				}
				
				var trans:SlideViewTransition = new SlideViewTransition();
				trans.direction = "right";
				navigator.defaultPopTransition = trans;
				
				
				
				
			}
			
			protected function activateSoftControls():void{
				this.actionBarVisible = true;
				removeElement(titleLabel);
				kidList.top = 10;
			}
			
			
			protected function kidList_clickHandler(event:MouseEvent):void
			{
				if (kidList.selectedItem != null){
					dataToPush.position = -1;
					dataToPush.kid = kidList.selectedItem;
					navigator.pushView(TimerView,dataToPush);
				}
			}
			
			
			
			protected function editButton_clickHandler(event:MouseEvent):void
			{
				
				
				if (kids.length == 0){
					navigator.pushView(ChildEdit,dataToPush);
				}
				else{
					navigator.pushView(ListEdit,dataToPush);
				}
				
				
				
			}
			
			
			protected function keyPress(event:KeyboardEvent):void
			{
				trace(event.keyCode);
				
				if (event.keyCode == Keyboard.MENU){
					var trans:SlideViewTransition = new SlideViewTransition();
					trans.direction = "down";
					navigator.pushView(views.ListEdit,dataToPush, null, trans);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="filterArray">
			<s:GlowFilter id="glow" blurX="8" blurY="8" color="#000000" quality="2" strength="1" alpha=".7" />
		</fx:Array>
	</fx:Declarations>
	
	<s:actionContent>
		<s:Button id="editButton"  click="editButton_clickHandler(event)" label="Edit"   />
	</s:actionContent>
	
	
	<s:List id="kidList" left="10" right="10" top="57" bottom="10" dataProvider="{kids}" labelField="name" click="kidList_clickHandler(event)" cacheAsBitmap="true" borderColor="0xcccccc" borderVisible="true">
		<s:itemRenderer >
			<fx:Component>
				<s:IconItemRenderer creationComplete="styleText()" messageFunction="secondsToTimer" decorator="@Embed('/assets/clock.png')" alternatingItemColors="['0xffffff','0xF8F7CE']" cacheAsBitmap="true">
					
					
					<fx:Script>
						<![CDATA[
							import flash.utils.clearInterval;
							
							import spark.components.supportClasses.StyleableTextField;
							
							protected var i:int = 0;
							protected var blinkCount:int = 8;
							protected var interval:uint =0;
							protected var timer:Timer = null;
							
							private function styleText():void{
								labelDisplay.setStyle("fontSize", 50);
								messageDisplay.setStyle("fontSize", 24);
								messageDisplay.setStyle("color", 0x61656A);
							}
							
							private function secondsToTimer(ob:Kid):String{
								styleText();
								
								ob.timer.addEventListener(TimerEvent.TIMER, timerProcess );
								ob.timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerEnd);
								
								return ob.clockReadout;
							}
							
							protected function timerProcess(event:TimerEvent):void
							{
								timer = event.currentTarget as Timer;
								messageDisplay.text = getClockReadout(timer.repeatCount - timer.currentCount);
								
							}
							
							protected function timerEnd(event:TimerEvent):void
							{
								timer = event.currentTarget as Timer;
								timer.reset();
								interval = setInterval(blink,500,messageDisplay);
								messageDisplay.textColor = 0xFF0000;
							}
							
							protected function blink(dyn_txt:StyleableTextField):void
							{
								if (i < blinkCount){
									dyn_txt.visible=!dyn_txt.visible;
									i++;
								}
								else{
									clearInterval(interval);
									dyn_txt.textColor = 0x61656A;
									dyn_txt.text = getClockReadout(timer.repeatCount - timer.currentCount);
								}
							}
							
							public function getClockReadout(timeoutLeft:int):String{
								var timeleft:int = timeoutLeft;
								var min:int = Math.floor(timeleft/60); 
								var sec:int = timeleft % 60;
								
								var minutes:String = min.toString();
								var seconds:String = sec.toString();
								
								if (seconds.length == 1){
									seconds = "0" + seconds;
								}
								return minutes + ":" + seconds;
							}
							
							
						]]>
					</fx:Script>
					
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	
	</s:List>
	<s:Label id="titleLabel" x="10" y="14" text="Who's in Trouble?" filters="{filterArray}" />
</s:View>
